0.  It is a lung disease caused by the inhaling of silica dust

1.  It's basically getting all of the usage data. Meaning, how much of the resources of the computer of the computer are being used.

2.  16

3.  Because if you didn't then it would take up a bunch of memory for no reason as it's a fairly large struct. 

4.  The for loop itself is looping through each word in the file in the for() declaration. It does this by reading in
one character at a time until c == EOF. It validates each character and ensures that there are no numbers for example
appending each character to a word as it goes through. Once it has gone through all validation and has the entire word
it then puts it through the check function (while at the same time doing the benchmarking). It then prints it if check
found that the word was misspelled and adds a value of 1 to the misspelled counter. 

5.  It just seemed to make more sense since you have to scan through each letter anyway to check it's validity of being a word.

6.  So that they couldn't be altered. Since you need that data to be exact and valid for the purpose of checking, 
you wouldn't want to change the words by mistake. 

7.  I used a hashtable. I made an array of size 2048. I set each position upon init to NULL. The struct I used was a node
with a word in it of length 46 and a next pointer. 

8.  0.17 total

9.  I increased the size of my hash table as I realized it was probably too small. That brought it down to 0.09 total

10. My hash function. I had a hard time finding one that was simple enough for me to understand and be effective. Thus I made one 
based on others I had seen. My load and unload is only slightly slower than the staff solutions. I wasn't sure if recursion was 
faster than a loop but I'm using loops on both load and unload. My check function is much slower (0.04 slower) than the staff solution
though and figured this was due to my hashing function. The data could probably be better distributed. I ran all tests on alice.txt
However, when checking against a larger file, it is very obvious that something is wrong with my check function. On shakespeare.txt
my check was 3.22 while the staff solution was 0.47. I believe the source of this, is simply because of my inefficient hash function. 


